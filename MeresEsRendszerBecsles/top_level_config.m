
function top_level_config(this_block)

  % Revision History:
  %
  %   25-Feb-2015  (00:35 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\Users\laca\Desktop\iRoobo2014Ver3\Fpga\SPARTAN3E\Spartan3E6500SystemVer2\MeresEsRendszerBecsles\top_level.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('top_level');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('QuadA');
  this_block.addSimulinkInport('QuadA2');
  this_block.addSimulinkInport('QuadA3');
  this_block.addSimulinkInport('QuadA4');
  this_block.addSimulinkInport('QuadB');
  this_block.addSimulinkInport('QuadB2');
  this_block.addSimulinkInport('QuadB3');
  this_block.addSimulinkInport('QuadB4');

  this_block.addSimulinkOutport('DIR');
  this_block.addSimulinkOutport('DIR2');
  this_block.addSimulinkOutport('DIR3');
  this_block.addSimulinkOutport('DIR4');
  this_block.addSimulinkOutport('IMP');
  this_block.addSimulinkOutport('IMP2');
  this_block.addSimulinkOutport('IMP3');
  this_block.addSimulinkOutport('IMP4');

  DIR_port = this_block.port('DIR');
  DIR_port.setType('bool');
  DIR_port.useHDLVector(false);
  DIR2_port = this_block.port('DIR2');
  DIR2_port.setType('bool');
  DIR2_port.useHDLVector(false);
  DIR3_port = this_block.port('DIR3');
  DIR3_port.setType('bool');
  DIR3_port.useHDLVector(false);
  DIR4_port = this_block.port('DIR4');
  DIR4_port.setType('bool');
  DIR4_port.useHDLVector(false);
  IMP_port = this_block.port('IMP');
  IMP_port.setType('bool');
  IMP_port.useHDLVector(false);
  IMP2_port = this_block.port('IMP2');
  IMP2_port.setType('bool');
  IMP2_port.useHDLVector(false);
  IMP3_port = this_block.port('IMP3');
  IMP3_port.setType('bool');
  IMP3_port.useHDLVector(false);
  IMP4_port = this_block.port('IMP4');
  IMP4_port.setType('bool');
  IMP4_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('QuadA').width ~= 1);
      this_block.setError('Input data type for port "QuadA" must have width=1.');
    end

    this_block.port('QuadA').useHDLVector(false);

    if (this_block.port('QuadA2').width ~= 1);
      this_block.setError('Input data type for port "QuadA2" must have width=1.');
    end

    this_block.port('QuadA2').useHDLVector(false);

    if (this_block.port('QuadA3').width ~= 1);
      this_block.setError('Input data type for port "QuadA3" must have width=1.');
    end

    this_block.port('QuadA3').useHDLVector(false);

    if (this_block.port('QuadA4').width ~= 1);
      this_block.setError('Input data type for port "QuadA4" must have width=1.');
    end

    this_block.port('QuadA4').useHDLVector(false);

    if (this_block.port('QuadB').width ~= 1);
      this_block.setError('Input data type for port "QuadB" must have width=1.');
    end

    this_block.port('QuadB').useHDLVector(false);

    if (this_block.port('QuadB2').width ~= 1);
      this_block.setError('Input data type for port "QuadB2" must have width=1.');
    end

    this_block.port('QuadB2').useHDLVector(false);

    if (this_block.port('QuadB3').width ~= 1);
      this_block.setError('Input data type for port "QuadB3" must have width=1.');
    end

    this_block.port('QuadB3').useHDLVector(false);

    if (this_block.port('QuadB4').width ~= 1);
      this_block.setError('Input data type for port "QuadB4" must have width=1.');
    end

    this_block.port('QuadB4').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % System Generator found no apparent clock signals in the HDL, assuming combinational logic.
  % -----------------------------
   if (this_block.inputRatesKnown)
     inputRates = this_block.inputRates; 
     uniqueInputRates = unique(inputRates); 
     outputRate = uniqueInputRates(1);
     for i = 2:length(uniqueInputRates)
       if (uniqueInputRates(i) ~= Inf)
         outputRate = gcd(outputRate,uniqueInputRates(i));
       end
     end  % for(i)
     for i = 1:this_block.numSimulinkOutports 
       this_block.outport(i).setRate(outputRate); 
     end  % for(i)
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('top_level.vhd');

return;


