/*
 * main.c
 *
 *  Created on: Apr 20, 2015
 *      Author: laca
 */


#include<xil_io.h>
#include"xparameters.h"
#include<xil_types.h>
#include "xgpio.h"
#include "ipsdksebesegespozicio_plbw.h"
#include "xcope.h"
#include "xutil.h"
#include "xspi.h"		/* SPI device driver */

#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"

XGpio Gpio;
#define LED_CHANNEL 1
#define LED 0x01
#define LED1 0x01
#define LED2 0x02
#define LED3 0x03
#define LED4 0x04
#define GPIO_LED_DEVICE_ID  XPAR_LED4GPIO_DEVICE_ID
#define SPI_DEVICE_ID		 XPAR_SPIZYBO_DEVICE_ID
static int SpiSlaveInit(XSpi *SpiInstancePtr, u16 SpiDeviceId);
static XSpi SpiInstance;   /* The instance of the SPI device */
int Test;

typedef struct{
	        s32 Config;
	 	    s32 RefPos;
	 	    s32 RefSeb;
	 	    s32 Q0;
	 	    s32 Q1;
	 	    s32 Q2;
	 	    s32 TsH;
	 	    s32 TsL;
	 	    s32 Egyeb;
	 	    s32 PwmFrekREgH;
	 	    s32 PwmFrekRegL;
	 	    s32 sugarakAranya;
	 	    s32 qSav;
 }inIpMag;
typedef struct{
	        s32 USebesseg;
		    s32 UPozicio;
		    s32 SebessegPozicio;
		    s32 AktPozicio;
		    s32 SzurtSebessegPozicio;
		    s32 AktSebesseg;
		    s32 SzurtSebesseg;
		    s32 eSebeseg;
		    s32 n2;
		    s32 n3;
		    s32 n4;
		    s32 n5;
		    s32 n6;
 }outMag;
typedef struct{
	 outMag m0;
	 outMag m1;
	 outMag m2;
	 outMag m3;
  }toZybo;
typedef struct{
	  inIpMag im0;
	  inIpMag im1;
	  inIpMag im2;
	  inIpMag im3;
}rcvZybo;


int main()
{
	 toZybo send;
	 rcvZybo recv;
	 u8 Data=0xFA;
	 u32 dataRead;
	 u32 dataWrite;
	 XGpio_Initialize(&Gpio, GPIO_LED_DEVICE_ID);
	 XGpio_SetDataDirection(&Gpio, LED_CHANNEL, ~LED);
	 XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, ~Data| LED3);
	 xc_iface_t *iface;
	 int Status;
	 Status = SpiSlaveInit(&SpiInstance, SPI_DEVICE_ID);
	 if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	 }
	 XGpio_Initialize(&Gpio, GPIO_LED_DEVICE_ID);
	 XGpio_SetDataDirection(&Gpio, LED_CHANNEL, ~LED);
	 XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, ~Data);


//initialize the software driver, assuming the Pcore device ID is 0
XC_CfgInitialize(&iface, &IPSDKSEBESEGESPOZICIO_PLBW_ConfigTable[XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_DEVICE_ID]);
while(1)
  {

	send.m0.AktPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_AKTPOZICIO);
	send.m0.UPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_UPOZICIO);
	send.m0.AktSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_AKTSEBESSEG);
	send.m0.SebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_SEBESSEGPOZICIO);
	send.m0.USebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_USEBESSEG);
	send.m0.eSebeseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_ESEBESSEG);

	/*	send.m1.AktPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_AKTPOZICIO);
	send.m1.UPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_UPOZICIO);
	send.m1.AktSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_AKTSEBESSEG);
	send.m1.SebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SEBESSEGPOZICIO);
	send.m1.SzurtSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SZURTSEBESSEG);
	send.m1.SzurtSebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SZURTSEBESSEGPOZICIO);
	send.m1.USebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_USEBESSEG);
	send.m1.eSebeseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_ESEBESSEG);

	send.m2.AktPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_AKTPOZICIO);
	send.m2.UPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_UPOZICIO);
	send.m2.AktSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_AKTSEBESSEG);
	send.m2.SebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SEBESSEGPOZICIO);
	send.m2.SzurtSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SZURTSEBESSEG);
	send.m2.SzurtSebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SZURTSEBESSEGPOZICIO);
	send.m2.USebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_USEBESSEG);
	send.m2.eSebeseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_ESEBESSEG);

	send.m3.AktPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_AKTPOZICIO);
	send.m3.UPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_UPOZICIO);
	send.m3.AktSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_AKTSEBESSEG);
	send.m3.SebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SEBESSEGPOZICIO);
	send.m3.SzurtSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SZURTSEBESSEG);
	send.m3.SzurtSebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SZURTSEBESSEGPOZICIO);
	send.m3.USebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_USEBESSEG);
	send.m3.eSebeseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_ESEBESSEG);*/



	//XSpi_Transfer(&SpiInstance,  &send , &recv, 208);
	XSpi_Transfer(&SpiInstance,  10 , &recv, 208);
	Data=~Data;
		XGpio_Initialize(&Gpio, GPIO_LED_DEVICE_ID);
		XGpio_SetDataDirection(&Gpio, LED_CHANNEL, ~LED);
		XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, ~Data);

	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_CONFIG,recv.im0.Config);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q0,recv.im0.Q0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q1,recv.im0.Q1);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q2,recv.im0.Q2);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_PIDTS,recv.im0.TsH<<16+recv.im0.TsL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_PWMFREK,recv.im0.PwmFrekREgH<<16+recv.im0.PwmFrekRegL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_REFSPEED,recv.im0.RefSeb);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_POSREF,recv.im0.RefPos);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_SUGARAKARANYA,recv.im0.sugarakAranya);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q_SAV,recv.im0.qSav);

	/*	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_CONFIG,recv.im1.Config);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q0,recv.im1.Q0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q1,recv.im1.Q1);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q2,recv.im1.Q2);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_PIDTS,recv.im1.TsH<<16+recv.im0.TsL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_PWMFREK,recv.im1.PwmFrekREgH<<16+recv.im1.PwmFrekRegL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_REFSPEED,recv.im1.RefSeb);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_POSREF,recv.im1.RefPos);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SUGARAKARANYA,recv.im1.sugarakAranya);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q_SAV,recv.im1.qSav);

	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_CONFIG,recv.im2.Config);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q0,recv.im2.Q0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q1,recv.im2.Q1);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q2,recv.im2.Q2);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_PIDTS,recv.im2.TsH<<16+recv.im0.TsL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_PWMFREK,recv.im2.PwmFrekREgH<<16+recv.im2.PwmFrekRegL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_REFSPEED,recv.im2.RefSeb);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_POSREF,recv.im2.RefPos);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SUGARAKARANYA,recv.im2.sugarakAranya);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q_SAV,recv.im2.qSav);

	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_CONFIG,recv.im3.Config);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q0,recv.im3.Q0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q1,recv.im3.Q1);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q2,recv.im3.Q2);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_PIDTS,recv.im3.TsH<<16+recv.im0.TsL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_PWMFREK,recv.im3.PwmFrekREgH<<16+recv.im3.PwmFrekRegL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_REFSPEED,recv.im3.RefSeb);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_POSREF,recv.im3.RefPos);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SUGARAKARANYA,recv.im3.sugarakAranya);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q_SAV,recv.im3.qSav);*/

  }
}
int SpiSlaveInit(XSpi *SpiInstancePtr, u16 SpiDeviceId)
{
	XSpi_Config *ConfigPtr;
	int Status;
	//u32 Count;

	ConfigPtr = XSpi_LookupConfig(SpiDeviceId);
	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}
	Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr, XPAR_SPIZYBO_BASEADDR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	//Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION |XSP_CLK_PHASE_1_OPTION);
	Status = XSpi_SetOptions(SpiInstancePtr, XSP_CLK_PHASE_1_OPTION ); ///| XSP_CLK_ACTIVE_LOW_OPTION
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	//XSpi_GetSlaveSelect(SpiInstancePtr);
	//XSpi_SetSlaveSelect(SpiInstancePtr,1);
	XSpi_Start(SpiInstancePtr);
	XSpi_IntrGlobalDisable(SpiInstancePtr);
	return XST_SUCCESS;
}
