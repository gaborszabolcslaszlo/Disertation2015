/*
 * main.c
 *
 *  Created on: Apr 20, 2015
 *      Author: laca
 */


#include<xil_io.h>
#include"xparameters.h"
#include<xil_types.h>
#include "xgpio.h"
#include "ipsdksebesegespozicio_plbw.h"
#include "xcope.h"
#include "xutil.h"
#include "xspi.h"		/* SPI device driver */

#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"

XGpio Gpio;
#define LED_CHANNEL 1
#define LED 0x01
#define LED1 0x01
#define LED2 0x02
#define LED3 0x03
#define LED4 0x04
#define GPIO_LED_DEVICE_ID  XPAR_LED4GPIO_DEVICE_ID
#define SPI_DEVICE_ID		 XPAR_SPIZYBO_DEVICE_ID
static int SpiSlaveInit(XSpi *SpiInstancePtr, u16 SpiDeviceId);
static XSpi SpiInstance;   /* The instance of the SPI device */
int Test;

typedef struct{
	        s32 Config0;
	 	    s32 RefPos0;
	 	    s32 RefSeb0;
	 	    s32 Q0_0;
	 	    s32 Q1_0;
	 	    s32 Q2_0;
	 	    s32 TsH0;
	 	    s32 TsL0;
	 	    s32 Egyeb0;
	 	    s32 PwmFrekREgH0;
	 	    s32 PwmFrekRegL0;
	 	    s32 sugarakAranya0;
	 	    s32 qSav0;
	 	    s32 Config1;
			s32 RefPos1;
			s32 RefSeb1;
			s32 Q0_1;
			s32 Q1_1;
			s32 Q2_1;
			s32 TsH1;
			s32 TsL1;
			s32 Egyeb1;
			s32 PwmFrekREgH1;
			s32 PwmFrekRegL1;
			s32 sugarakAranya1;
			s32 qSav1;
	 	  	s32 Config2;
			s32 RefPos2;
			s32 RefSeb2;
			s32 Q0_2;
			s32 Q1_2;
			s32 Q2_2;
			s32 TsH2;
			s32 TsL2;
			s32 Egyeb2;
			s32 PwmFrekREgH2;
			s32 PwmFrekRegL2;
			s32 sugarakAranya2;
			s32 qSav2;

	 	  	s32 Config3;
			s32 RefPos3;
			s32 RefSeb3;
			s32 Q0_3;
			s32 Q1_3;
			s32 Q2_3;
			s32 TsH3;
			s32 TsL3;
			s32 Egyeb3;
			s32 PwmFrekREgH3;
			s32 PwmFrekRegL3;
			s32 sugarakAranya3;
			s32 qSav3;
 }inIpMag;
typedef struct{
	        s32 USebesseg0;
		    s32 UPozicio0;
		    s32 SebessegPozicio0;
		    s32 AktPozicio0;
		    s32 SzurtSebessegPozicio0;
		    s32 AktSebesseg0;
		    s32 SzurtSebesseg0;
		    s32 eSebeseg0;
		    s32 n20;
		    s32 n30;
		    s32 n40;
		    s32 n50;
		    s32 n60;
		    s32 USebesseg1;
			s32 UPozicio1;
			s32 SebessegPozicio1;
			s32 AktPozicio1;
			s32 SzurtSebessegPozicio1;
			s32 AktSebesseg1;
			s32 SzurtSebesseg1;
			s32 eSebeseg1;
			s32 n21;
			s32 n31;
			s32 n41;
			s32 n51;
			s32 n61;
			s32 USebesseg2;
			s32 UPozicio2;
			s32 SebessegPozicio2;
			s32 AktPozicio2;
			s32 SzurtSebessegPozicio2;
			s32 AktSebesseg2;
			s32 SzurtSebesseg2;
			s32 eSebeseg2;
			s32 n22;
			s32 n32;
			s32 n42;
			s32 n52;
			s32 n62;
		    s32 USebesseg3;
			s32 UPozicio3;
			s32 SebessegPozicio3;
			s32 AktPozicio3;
			s32 SzurtSebessegPozicio3;
			s32 AktSebesseg3;
			s32 SzurtSebesseg3;
			s32 eSebeseg3;
			s32 n23;
			s32 n33;
			s32 n43;
			s32 n53;
			s32 n63;
 }outMag;


	outMag send;
	inIpMag recv;
int main()
{
	//outMag send;
	//inIpMag recv;
	 u8 Data=0xFA;
	 u32 dataRead;
	 u32 dataWrite;
	 XGpio_Initialize(&Gpio, GPIO_LED_DEVICE_ID);
	 XGpio_SetDataDirection(&Gpio, LED_CHANNEL, ~LED);
	 XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, ~Data| LED3);
	 xc_iface_t *iface;
	 int Status;
	 Status = SpiSlaveInit(&SpiInstance, SPI_DEVICE_ID);
	 if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	 }
	 XGpio_Initialize(&Gpio, GPIO_LED_DEVICE_ID);
	 XGpio_SetDataDirection(&Gpio, LED_CHANNEL, ~LED);
	 XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, ~Data);


//initialize the software driver, assuming the Pcore device ID is 0
XC_CfgInitialize(&iface, &IPSDKSEBESEGESPOZICIO_PLBW_ConfigTable[XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_DEVICE_ID]);
while(1)
  {

	send.AktPozicio0=100;//Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_AKTPOZICIO);
	send.UPozicio0=40;//Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_UPOZICIO);
	send.AktSebesseg0=30;//Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_AKTSEBESSEG);
	send.SebessegPozicio0=20;//Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_SEBESSEGPOZICIO);
	send.USebesseg0=50;//Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_USEBESSEG);
	send.eSebeseg0=10;//Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_ESEBESSEG);

	/*	send.m1.AktPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_AKTPOZICIO);
	send.m1.UPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_UPOZICIO);
	send.m1.AktSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_AKTSEBESSEG);
	send.m1.SebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SEBESSEGPOZICIO);
	send.m1.SzurtSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SZURTSEBESSEG);
	send.m1.SzurtSebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SZURTSEBESSEGPOZICIO);
	send.m1.USebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_USEBESSEG);
	send.m1.eSebeseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_ESEBESSEG);

	send.m2.AktPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_AKTPOZICIO);
	send.m2.UPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_UPOZICIO);
	send.m2.AktSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_AKTSEBESSEG);
	send.m2.SebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SEBESSEGPOZICIO);
	send.m2.SzurtSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SZURTSEBESSEG);
	send.m2.SzurtSebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SZURTSEBESSEGPOZICIO);
	send.m2.USebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_USEBESSEG);
	send.m2.eSebeseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_ESEBESSEG);

	send.m3.AktPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_AKTPOZICIO);
	send.m3.UPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_UPOZICIO);
	send.m3.AktSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_AKTSEBESSEG);
	send.m3.SebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SEBESSEGPOZICIO);
	send.m3.SzurtSebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SZURTSEBESSEG);
	send.m3.SzurtSebessegPozicio=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SZURTSEBESSEGPOZICIO);
	send.m3.USebesseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_USEBESSEG);
	send.m3.eSebeseg=Xil_In32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_ESEBESSEG);*/


     s32 i =10;
	XSpi_Transfer(&SpiInstance,  &send.USebesseg3 , &recv, 208);
	//XSpi_Transfer(&SpiInstance,  &i , &recv, 208);
	Data=~Data;
		XGpio_Initialize(&Gpio, GPIO_LED_DEVICE_ID);
		XGpio_SetDataDirection(&Gpio, LED_CHANNEL, ~LED);
		XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, ~Data);

	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_CONFIG,recv.Config0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q0,recv.Q0_0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q1,recv.Q1_0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q2,recv.Q2_0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_PIDTS,recv.TsH0<<16+recv.TsL0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_PWMFREK,recv.PwmFrekREgH0<<16+recv.PwmFrekRegL0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_REFSPEED,recv.RefSeb0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_POSREF,recv.RefPos0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_SUGARAKARANYA,recv.sugarakAranya0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_0_MEMMAP_Q_SAV,recv.qSav0);

	/*	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_CONFIG,recv.im1.Config);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q0,recv.im1.Q0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q1,recv.im1.Q1);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q2,recv.im1.Q2);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_PIDTS,recv.im1.TsH<<16+recv.im0.TsL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_PWMFREK,recv.im1.PwmFrekREgH<<16+recv.im1.PwmFrekRegL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_REFSPEED,recv.im1.RefSeb);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_POSREF,recv.im1.RefPos);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_SUGARAKARANYA,recv.im1.sugarakAranya);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_1_MEMMAP_Q_SAV,recv.im1.qSav);

	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_CONFIG,recv.im2.Config);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q0,recv.im2.Q0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q1,recv.im2.Q1);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q2,recv.im2.Q2);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_PIDTS,recv.im2.TsH<<16+recv.im0.TsL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_PWMFREK,recv.im2.PwmFrekREgH<<16+recv.im2.PwmFrekRegL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_REFSPEED,recv.im2.RefSeb);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_POSREF,recv.im2.RefPos);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_SUGARAKARANYA,recv.im2.sugarakAranya);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_2_MEMMAP_Q_SAV,recv.im2.qSav);

	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_CONFIG,recv.im3.Config);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q0,recv.im3.Q0);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q1,recv.im3.Q1);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q2,recv.im3.Q2);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_PIDTS,recv.im3.TsH<<16+recv.im0.TsL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_PWMFREK,recv.im3.PwmFrekREgH<<16+recv.im3.PwmFrekRegL);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_REFSPEED,recv.im3.RefSeb);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_POSREF,recv.im3.RefPos);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_SUGARAKARANYA,recv.im3.sugarakAranya);
	Xil_Out32(XPAR_IPSDKSEBESEGESPOZICIO_PLBW_3_MEMMAP_Q_SAV,recv.im3.qSav);*/

  }
}
int SpiSlaveInit(XSpi *SpiInstancePtr, u16 SpiDeviceId)
{
	XSpi_Config *ConfigPtr;
	int Status;
	//u32 Count;

	ConfigPtr = XSpi_LookupConfig(SpiDeviceId);
	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}
	Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr, XPAR_SPIZYBO_BASEADDR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	//Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION |XSP_CLK_PHASE_1_OPTION);
	Status = XSpi_SetOptions(SpiInstancePtr, XSP_CLK_PHASE_1_OPTION ); ///| XSP_CLK_ACTIVE_LOW_OPTION
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	//XSpi_GetSlaveSelect(SpiInstancePtr);
	//XSpi_SetSlaveSelect(SpiInstancePtr,1);
	XSpi_Start(SpiInstancePtr);
	XSpi_IntrGlobalDisable(SpiInstancePtr);
	return XST_SUCCESS;
}
